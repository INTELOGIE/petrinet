{"name":"Petrinet","tagline":"PHP Petrinet framework","body":"# Documentation\r\n\r\nThis library follows the definition of the basic Petrinet model with weighted arcs as described\r\n[here](http://en.wikipedia.org/wiki/Petri_net), roughly:\r\n\r\n- there are two types of nodes: Places and Transitions\r\n- these nodes are connected with Arcs having a weight\r\n- a Petrinet is a set of Places and Transitions\r\n- a Place Marking associates a set of Tokens to a place\r\n- a Marking is a set of Place Markings\r\n- a Petrinet can be executed against a Marking\r\n\r\nIn workflow words, the Petrinet is the workflow structure and each marking is a workflow instance.\r\n\r\n## Model\r\n\r\nThis library provides the models of basic Petrinets that you can use directly to work without persistence\r\nor extend with your custom entities mapped to a database with any ORM.\r\n\r\n## Builder\r\n\r\nAll builders make usage of a `FactoryInterface` that is reponsible for creating model instances.\r\nBy default, the factory is configured to create models present in this library, but it is possible to configure it\r\nto create your custom model instances (for example Doctrine Entities) by passing the class names to its constructor.\r\n\r\n```php\r\n// Instanciating the factory\r\n$factory = new \\Petrinet\\Model\\Factory();\r\n```\r\n\r\n### Petrinet Builder\r\n\r\nThe Petrinet builder helps creating places and transitions, connecting them with arcs\r\nand retrieving the resulting Petrinet.\r\n\r\n#### Overview\r\n\r\n```php\r\n// Instanciating the builder\r\n$builder = new \\Petrinet\\Builder\\PetrinetBuilder($factory);\r\n\r\n// Creating a place\r\n$place = $builder->place();\r\n\r\n// Creating a transition\r\n$transition = $builder->transition();\r\n\r\n// Connecting a place to a transition\r\n$builder->connect($place, $transition);\r\n\r\n// Connecting a transition to a place\r\n$builder->connect($transition, $place);\r\n\r\n// Connecting a place to a transition with an arc of weight 3\r\n$builder->connect($place, $transition, 3);\r\n\r\n// Retrieving the Petrinet\r\n$petrinet = $builder->getPetrinet();\r\n```\r\n\r\n#### Example\r\n\r\nThis example shows how to create the following Petrinet: ![Petrinet](https://raw.githubusercontent.com/florianv/petrinet/master/docs/images/petrinet_builder.png)\r\n\r\n```php\r\n$petrinet = $builder\r\n    ->connect($builder->place(), $t1 = $builder->transition())\r\n    ->connect($t1, $p2 = $builder->place())\r\n    ->connect($t1, $p3 = $builder->place())\r\n    ->connect($p2, $t2 = $builder->transition())\r\n    ->connect($p3, $t2)\r\n    ->connect($t2, $builder->place())\r\n    ->getPetrinet();\r\n```\r\n\r\n### Marking Builder\r\n\r\nThe marking builder helps creating place markings and retrieving the resulting Petrinet marking\r\n(the places can be created manually or using the `PetrinetBuilder` above).\r\n\r\n#### Overview\r\n\r\n```php\r\n// Instanciating the builder\r\n$builder = new \\Petrinet\\Builder\\MarkingBuilder($factory);\r\n\r\n// Marks a place with the specified tokens number\r\n$builder->mark($place, 3);\r\n\r\n// Marks a place with the specified token\r\n$builder->mark($place, new \\Petrinet\\Model\\Token());\r\n\r\n// Marks a place with the specified tokens\r\n$builder->mark($place, array(new \\Petrinet\\Model\\Token(), new \\Petrinet\\Model\\Token()));\r\n\r\n// Retrieving the Marking\r\n$marking = $builder->getMarking();\r\n```\r\n\r\n#### Example\r\n\r\nThis example shows how to create a marking containing two place markings:\r\n\r\n- The place `$p1` is marked with 3 tokens\r\n- The place `$p2` is marked with 2 tokens\r\n\r\n```php\r\n$marking = $markingBuilder\r\n    ->mark($p1, 3)\r\n    ->mark($p2, 2)\r\n    ->getMarking();\r\n```\r\n\r\n## Service\r\n\r\nThe transition service allows you to check if a transition is enabled in a given marking and fire an enabled\r\ntransition.\r\n\r\n```php\r\n// Instanciates the transition service\r\n$transitionService = new \\Petrinet\\Service\\TransitionService($factory);\r\n\r\n// Checks if the transition is enabled in the given marking\r\n$transitionService->isEnabled($transition, $marking);\r\n\r\n// Fires the transition in the given marking\r\ntry {\r\n    $transitionService->fire($transition, $marking);\r\n} catch (\\Petrinet\\Service\\Exception\\TransitionNotEnabledException $e) {\r\n    // The transition is not enabled and cannot be fired\r\n}\r\n```\r\n\r\nFiring a transition will modify the place markings by removing and adding new tokens to them.\r\nIt will also create missing place markings if not existing.\r\nThe persistence of the marking after firing a transition is up to you.\r\n\r\n## Dumper\r\n\r\n### Graphviz Dumper\r\n\r\nThe Graphviz dumper dumps a Petrinet as a string in `dot` format that can be processed by\r\nthe [Graphviz](http://www.graphviz.org) software.\r\n\r\n#### Usage\r\n\r\n```php\r\n// Instanciates the Dumper\r\n$dumper = new \\Petrinet\\Dumper\\GraphvizDumper();\r\n\r\n// Dumps the Petrinet structure\r\n$string = $dumper->dump($petrinet);\r\n\r\n// Dumps the Petrinet in a given marking\r\n$string = $dumper->dump($petrinet, $marking);\r\n```\r\n\r\nYou can write the resulting string in a file:\r\n\r\n```php\r\nfile_put_contents('petrinet.dot', $string);\r\n```\r\n\r\nand transform it to a PNG image using the command:\r\n\r\n```bash\r\n$ dot -Tpng petrinet.dot > petrinet.png\r\n```\r\n\r\nYou will obtain this kind of image:\r\n\r\n![Petrinet](https://raw.githubusercontent.com/florianv/petrinet/master/docs/images/graphviz.png)\r\n\r\n## Database Mapping\r\n\r\n### Doctrine ORM\r\n\r\nThe following example shows the basic mapping for the Petrinet model classes using Doctrine2 ORM.\r\n\r\n#### Petrinet\r\n\r\n```php\r\n<?php\r\n\r\nnamespace Acme\\Bundle\\WorkflowBundle\\Entity;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse Petrinet\\Model\\Petrinet as BasePetrinet;\r\n\r\n/**\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"petrinet\")\r\n */\r\nclass Petrinet extends BasePetrinet\r\n{\r\n    /**\r\n     * @ORM\\Id\r\n     * @ORM\\GeneratedValue\r\n     * @ORM\\Column(type=\"integer\")\r\n     */\r\n    protected $id;\r\n\r\n    /**\r\n     * @ORM\\ManyToMany(targetEntity=\"Acme\\Bundle\\WorkflowBundle\\Entity\\Place\", cascade={\"persist\"})\r\n     * @ORM\\JoinTable(\r\n     *  name=\"petrinet_place_xref\",\r\n     *  joinColumns={@ORM\\JoinColumn(name=\"petrinet_id\")},\r\n     *  inverseJoinColumns={@ORM\\JoinColumn(name=\"place_id\", unique=true)}\r\n     * )\r\n     */\r\n    protected $places;\r\n\r\n    /**\r\n     * @ORM\\ManyToMany(targetEntity=\"Acme\\Bundle\\WorkflowBundle\\Entity\\Transition\", cascade={\"persist\"})\r\n     * @ORM\\JoinTable(\r\n     *  name=\"petrinet_transition_xref\",\r\n     *  joinColumns={@ORM\\JoinColumn(name=\"petrinet_id\")},\r\n     *  inverseJoinColumns={@ORM\\JoinColumn(name=\"transition_id\", unique=true)}\r\n     * )\r\n     */\r\n    protected $transitions;\r\n}\r\n```\r\n\r\n#### InputArc\r\n\r\n```php\r\n<?php\r\n\r\nnamespace Acme\\Bundle\\WorkflowBundle\\Entity;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse Petrinet\\Model\\InputArc as BaseInputArc;\r\n\r\n/**\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"input_arc\")\r\n */\r\nclass InputArc extends BaseInputArc\r\n{\r\n    /**\r\n     * @ORM\\Id\r\n     * @ORM\\GeneratedValue\r\n     * @ORM\\Column(type=\"integer\")\r\n     */\r\n    protected $id;\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"Acme\\Bundle\\WorkflowBundle\\Entity\\Place\", inversedBy=\"outputArcs\")\r\n     */\r\n    protected $place;\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"Acme\\Bundle\\WorkflowBundle\\Entity\\Transition\", inversedBy=\"inputArcs\")\r\n     */\r\n    protected $transition;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"integer\", nullable=false)\r\n     */\r\n    protected $weight;\r\n}\r\n```\r\n\r\n#### OutputArc\r\n\r\n```php\r\n<?php\r\n\r\nnamespace Acme\\Bundle\\WorkflowBundle\\Entity;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse Petrinet\\Model\\OutputArc as BaseOutputArc;\r\n\r\n/**\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"output_arc\")\r\n */\r\nclass OutputArc extends BaseOutputArc\r\n{\r\n    /**\r\n     * @ORM\\Id\r\n     * @ORM\\GeneratedValue\r\n     * @ORM\\Column(type=\"integer\")\r\n     */\r\n    protected $id;\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"Acme\\Bundle\\WorkflowBundle\\Entity\\Place\", inversedBy=\"inputArcs\")\r\n     */\r\n    protected $place;\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"Acme\\Bundle\\WorkflowBundle\\Entity\\Transition\", inversedBy=\"outputArcs\")\r\n     */\r\n    protected $transition;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"integer\", nullable=false)\r\n     */\r\n    protected $weight;\r\n}\r\n```\r\n\r\n#### Marking\r\n\r\n```php\r\n<?php\r\n\r\nnamespace Acme\\Bundle\\WorkflowBundle\\Entity;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse Petrinet\\Model\\Marking as BaseMarking;\r\n\r\n/**\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"marking\")\r\n */\r\nclass Marking extends BaseMarking\r\n{\r\n    /**\r\n     * @ORM\\Id\r\n     * @ORM\\GeneratedValue\r\n     * @ORM\\Column(type=\"integer\")\r\n     */\r\n    protected $id;\r\n\r\n    /**\r\n     * @ORM\\ManyToMany(targetEntity=\"Acme\\Bundle\\WorkflowBundle\\Entity\\PlaceMarking\", cascade={\"persist\"})\r\n     * @ORM\\JoinTable(\r\n     *  name=\"marking_place_marking_xref\",\r\n     *  joinColumns={@ORM\\JoinColumn(name=\"marking_id\")},\r\n     *  inverseJoinColumns={@ORM\\JoinColumn(name=\"place_marking_id\", unique=true)}\r\n     * )\r\n     */\r\n    protected $placeMarkings;\r\n}\r\n```\r\n\r\n#### Place\r\n\r\n```php\r\n<?php\r\n\r\nnamespace Acme\\Bundle\\WorkflowBundle\\Entity;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse Petrinet\\Model\\Place as BasePlace;\r\n\r\n/**\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"place\")\r\n */\r\nclass Place extends BasePlace\r\n{\r\n    /**\r\n     * @ORM\\Id\r\n     * @ORM\\GeneratedValue\r\n     * @ORM\\Column(type=\"integer\")\r\n     */\r\n    protected $id;\r\n\r\n    /**\r\n     * @ORM\\OneToMany(\r\n     *   targetEntity=\"Acme\\Bundle\\WorkflowBundle\\Entity\\OutputArc\",\r\n     *   mappedBy=\"place\",\r\n     *   cascade={\"persist\"}\r\n     * )\r\n     */\r\n    protected $inputArcs;\r\n\r\n    /**\r\n     * @ORM\\OneToMany(\r\n     *   targetEntity=\"Acme\\Bundle\\WorkflowBundle\\Entity\\InputArc\",\r\n     *   mappedBy=\"place\",\r\n     *   cascade={\"persist\"}\r\n     * )\r\n     */\r\n    protected $outputArcs;\r\n}\r\n```\r\n\r\n#### Place Marking\r\n\r\n```php\r\n<?php\r\n\r\nnamespace Acme\\Bundle\\WorkflowBundle\\Entity;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse Petrinet\\Model\\PlaceMarking as BasePlaceMarking;\r\n\r\n/**\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"place_marking\")\r\n */\r\nclass PlaceMarking extends BasePlaceMarking\r\n{\r\n    /**\r\n     * @ORM\\Id\r\n     * @ORM\\GeneratedValue\r\n     * @ORM\\Column(type=\"integer\")\r\n     */\r\n    protected $id;\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=\"Acme\\Bundle\\WorkflowBundle\\Entity\\Place\")\r\n     */\r\n    protected $place;\r\n\r\n    /**\r\n     * @ORM\\ManyToMany(targetEntity=\"Acme\\Bundle\\WorkflowBundle\\Entity\\Token\", cascade={\"persist\"})\r\n     * @ORM\\JoinTable(\r\n     *  name=\"place_marking_token_xref\",\r\n     *  joinColumns={@ORM\\JoinColumn(name=\"place_marking_id\")},\r\n     *  inverseJoinColumns={@ORM\\JoinColumn(name=\"token_id\", unique=true)}\r\n     * )\r\n     */\r\n    protected $tokens;\r\n}\r\n```\r\n\r\n#### Token\r\n\r\n```php\r\n<?php\r\n\r\nnamespace Acme\\Bundle\\WorkflowBundle\\Entity;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse Petrinet\\Model\\Token as BaseToken;\r\n\r\n/**\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"token\")\r\n */\r\nclass Token extends BaseToken\r\n{\r\n    /**\r\n     * @ORM\\Id\r\n     * @ORM\\GeneratedValue\r\n     * @ORM\\Column(type=\"integer\")\r\n     */\r\n    protected $id;\r\n}\r\n```\r\n\r\n#### Transition\r\n\r\n```php\r\n<?php\r\n\r\nnamespace Acme\\Bundle\\WorkflowBundle\\Entity;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse Petrinet\\Model\\Transition as BaseTransition;\r\n\r\n/**\r\n * @ORM\\Entity\r\n * @ORM\\Table(name=\"transition\")\r\n */\r\nclass Transition extends BaseTransition\r\n{\r\n    /**\r\n     * @ORM\\Id\r\n     * @ORM\\GeneratedValue\r\n     * @ORM\\Column(type=\"integer\")\r\n     */\r\n    protected $id;\r\n\r\n    /**\r\n     * @ORM\\OneToMany(\r\n     *   targetEntity=\"Acme\\Bundle\\WorkflowBundle\\Entity\\InputArc\",\r\n     *   mappedBy=\"transition\",\r\n     *   cascade={\"persist\"}\r\n     * )\r\n     */\r\n    protected $inputArcs;\r\n\r\n    /**\r\n     * @ORM\\OneToMany(\r\n     *   targetEntity=\"Acme\\Bundle\\WorkflowBundle\\Entity\\OutputArc\",\r\n     *   mappedBy=\"transition\",\r\n     *   cascade={\"persist\"}\r\n     * )\r\n     */\r\n    protected $outputArcs;\r\n}\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}